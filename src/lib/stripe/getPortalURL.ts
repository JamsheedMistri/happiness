import { stripe } from '@lib/stripe/index';

type PortalMetadata = {
    generatedByHappinessAt?: string;
};
export const getPortalURL = async (): Promise<string> => {
    const portals = await stripe.billingPortal.configurations.list({
        active: true,
    });

    // Look for a portal that was generated by Happiness
    const loginPortal = portals.data.find((p) => Object.keys(p.metadata as PortalMetadata).includes('generatedByHappinessAt'));

    if (loginPortal?.login_page.url) {
        return loginPortal.login_page.url;
    }

    // If we don't have a portal, create one
    const createPortal = await stripe.billingPortal.configurations.create({
        business_profile: {
            headline: 'Manage your donations.',
        },
        features: {
            customer_update: {
                // TODO: Allow updates after setting up a webhook for Stripe to notify us of changes
                // allowed_updates: [
                //     'email',
                //     'tax_id',
                // ],
                enabled: false,
            },
            invoice_history: {
                enabled: true,
            },
            payment_method_update: {
                enabled: true,
            },
            subscription_cancel: {
                cancellation_reason: {
                    enabled: false,
                    options: ['too_expensive', 'other'],
                },
                enabled: true,
                mode: 'immediately',
                proration_behavior: 'none',
            },
            subscription_pause: {
                enabled: false,
            },
        },
        login_page: {
            enabled: true,
        },
        metadata: {
            generatedByHappinessAt: new Date().toISOString(),
        } as PortalMetadata,
    });

    return createPortal.login_page.url!;
};
